{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","compressImage","bind","handleChange","state","maxSizeMB","maxWidthOrHeight","webWorker","progress","inputSize","outputSize","inputUrl","outputUrl","mainThread","target","e","setState","currentTarget","value","p","useWebWorker","targetName","this","prevState","event","file","files","console","log","imageCompression","getExifOrientation","size","toFixed","URL","createObjectURL","options","onProgress","output","className","htmlFor","type","id","name","onChange","accept","src","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9474ea28.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport imageCompression from 'browser-image-compression'\n\nexport default class App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.compressImage = this.compressImage.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      maxSizeMB: 1,\n      maxWidthOrHeight: 1024,\n      webWorker: {\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null\n      },\n      mainThread: {\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null\n      }\n    }\n  }\n\n  handleChange (target) {\n    return (e) => {\n      this.setState({ [target]: e.currentTarget.value })\n    }\n  }\n\n  onProgress (p, useWebWorker) {\n    const targetName = useWebWorker ? 'webWorker' : 'mainThread'\n    this.setState(prevState => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        progress: p\n      }\n    }))\n  }\n\n  async compressImage (event, useWebWorker) {\n    const file = event.target.files[0]\n    console.log('input', file)\n    console.log(\n      'ExifOrientation',\n      await imageCompression.getExifOrientation(file)\n    )\n    const targetName = useWebWorker ? 'webWorker' : 'mainThread'\n    this.setState(prevState => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        inputSize: (file.size / 1024 / 1024).toFixed(2),\n        inputUrl: URL.createObjectURL(file)\n      }\n    }))\n    var options = {\n      maxSizeMB: this.state.maxSizeMB,\n      maxWidthOrHeight: this.state.maxWidthOrHeight,\n      useWebWorker,\n      onProgress: p => this.onProgress(p, useWebWorker)\n    }\n    const output = await imageCompression(file, options)\n    console.log('output', output)\n    this.setState(prevState => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        outputSize: (output.size / 1024 / 1024).toFixed(2),\n        outputUrl: URL.createObjectURL(output)\n      }\n    }))\n  }\n\n  render () {\n    const { webWorker, mainThread, maxSizeMB, maxWidthOrHeight } = this.state\n    return (\n      <div className=\"App\">\n        <div>\n          Options:<br />\n          <label htmlFor=\"maxSizeMB\">maxSizeMB: <input type=\"number\" id=\"maxSizeMB\" name=\"maxSizeMB\" value={maxSizeMB}\n onChange={this.handleChange('maxSizeMB')} /></label><br />\n          <label htmlFor=\"maxWidthOrHeight\">maxWidthOrHeight: <input type=\"number\" id=\"maxWidthOrHeight\"\n name=\"maxWidthOrHeight\" value={maxWidthOrHeight} onChange={this.handleChange('maxWidthOrHeight')} /></label>\n          <hr />\n          <label htmlFor=\"web-worker\">\n            Compress in web-worker{' '}\n            {webWorker.progress && <span>{webWorker.progress} %</span>}\n            <input\n              id=\"web-worker\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={e => this.compressImage(e, true)}\n            />\n          </label>\n          <p>\n            {webWorker.inputSize && (\n              <span>Source image size: {this.state.webWorker.inputSize} mb</span>\n            )}\n            {webWorker.outputSize && (\n              <span>, Output image size: {this.state.webWorker.outputSize}</span>\n            )}\n          </p>\n        </div>\n        <div>\n          <label htmlFor=\"main-thread\">\n            Compress in main-thread{' '}\n            {mainThread.progress && <span>{mainThread.progress} %</span>}\n            <input\n              id=\"main-thread\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={e => this.compressImage(e, false)}\n            />\n          </label>\n          <p>\n            {mainThread.inputSize && (\n              <span>Source image size: {this.state.mainThread.inputSize} mb</span>\n            )}\n            {mainThread.outputSize && (\n              <span>, Output image size: {this.state.mainThread.outputSize}</span>\n            )}\n          </p>\n        </div>\n        {(mainThread.inputUrl || webWorker.inputUrl) && (\n          <table>\n            <thead>\n            <tr>\n              <td>input preview</td>\n              <td>output preview</td>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td><img src={mainThread.inputUrl || webWorker.inputUrl} alt=\"input\" /></td>\n              <td><img src={mainThread.outputUrl || webWorker.outputUrl} alt=\"output\" /></td>\n            </tr>\n            </tbody>\n          </table>\n        )}\n      </div>\n    )\n  }\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}